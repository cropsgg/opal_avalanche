from __future__ import annotations

from pathlib import Path
from typing import Any, Dict, List
from datetime import datetime
import textwrap

from reportlab.lib.pagesizes import A4, letter
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak, Table, TableStyle
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_JUSTIFY, TA_LEFT

from app.core.config import get_settings


def export_pdf(run_id: str, payload: Dict[str, Any]) -> str:
    """Export a professional legal document in PDF format"""
    
    base = Path(get_settings().EXPORT_TMP_DIR)
    base.mkdir(parents=True, exist_ok=True)
    p = base / f"legal-report-{run_id}.pdf"
    
    # Create document with proper margins
    doc = SimpleDocTemplate(
        str(p),
        pagesize=letter,
        rightMargin=72,
        leftMargin=72,
        topMargin=72,
        bottomMargin=72
    )
    
    # Build document content
    story = []
    styles = getSampleStyleSheet()
    
    # Create custom styles
    custom_styles = _create_custom_styles(styles)
    
    # Add header section
    _add_pdf_header(story, custom_styles, run_id, payload)
    
    # Add query section
    _add_pdf_query(story, custom_styles, payload)
    
    # Add analysis section
    _add_pdf_analysis(story, custom_styles, payload)
    
    # Add verification section
    _add_pdf_verification(story, custom_styles, payload)
    
    # Add citations section
    _add_pdf_citations(story, custom_styles, payload)
    
    # Add appendix
    _add_pdf_appendix(story, custom_styles, payload)
    
    # Add footer
    _add_pdf_footer(story, custom_styles, run_id)
    
    # Build PDF
    doc.build(story)
    
    return str(p)


def _create_custom_styles(base_styles):
    """Create custom styles for legal document"""
    
    styles = {}
    
    # Title style
    styles['title'] = ParagraphStyle(
        'CustomTitle',
        parent=base_styles['Title'],
        fontSize=18,
        spaceAfter=30,
        alignment=TA_CENTER,
        fontName='Times-Bold'
    )
    
    # Subtitle style
    styles['subtitle'] = ParagraphStyle(
        'CustomSubtitle',
        parent=base_styles['Normal'],
        fontSize=12,
        spaceAfter=20,
        alignment=TA_CENTER,
        fontName='Times-Italic'
    )
    
    # Heading style
    styles['heading'] = ParagraphStyle(
        'CustomHeading',
        parent=base_styles['Heading1'],
        fontSize=14,
        spaceAfter=12,
        spaceBefore=20,
        fontName='Times-Bold'
    )
    
    # Subheading style
    styles['subheading'] = ParagraphStyle(
        'CustomSubheading',
        parent=base_styles['Heading2'],
        fontSize=12,
        spaceAfter=8,
        spaceBefore=12,
        fontName='Times-Bold'
    )
    
    # Body text style
    styles['body'] = ParagraphStyle(
        'CustomBody',
        parent=base_styles['Normal'],
        fontSize=11,
        spaceAfter=6,
        alignment=TA_JUSTIFY,
        fontName='Times-Roman',
        leading=14
    )
    
    # Citation style
    styles['citation'] = ParagraphStyle(
        'CustomCitation',
        parent=base_styles['Normal'],
        fontSize=10,
        spaceAfter=4,
        leftIndent=36,
        fontName='Times-Italic'
    )
    
    # Footer style
    styles['footer'] = ParagraphStyle(
        'CustomFooter',
        parent=base_styles['Normal'],
        fontSize=8,
        alignment=TA_CENTER,
        fontName='Times-Roman'
    )
    
    return styles


def _add_pdf_header(story, styles, run_id: str, payload: Dict[str, Any]):
    """Add header section to PDF"""
    
    # Title
    story.append(Paragraph("LEGAL ANALYSIS REPORT", styles['title']))
    story.append(Paragraph("Generated by OPAL Legal AI Assistant", styles['subtitle']))
    story.append(Spacer(1, 20))
    
    # Report details table
    verification = payload.get('verification', {})
    status = verification.get('verification_level', 'Unknown').title()
    confidence = verification.get('confidence', 0)
    
    data = [
        ['Report ID:', run_id],
        ['Generated On:', datetime.now().strftime('%B %d, %Y at %I:%M %p')],
        ['Query Mode:', payload.get('mode', 'General').title()],
        ['Verification Status:', f"{status} ({confidence:.1%} confidence)"]
    ]
    
    table = Table(data, colWidths=[2*inch, 4*inch])
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.grey),
        ('TEXTCOLOR', (0, 0), (0, -1), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (0, -1), 'Times-Bold'),
        ('FONTNAME', (1, 0), (1, -1), 'Times-Roman'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('VALIGN', (0, 0), (-1, -1), 'TOP'),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('ROWBACKGROUNDS', (0, 0), (-1, -1), [colors.white, colors.lightgrey])
    ]))
    
    story.append(table)
    story.append(PageBreak())


def _add_pdf_query(story, styles, payload: Dict[str, Any]):
    """Add query section"""
    
    story.append(Paragraph("QUERY", styles['heading']))
    
    query_text = payload.get('query', 'No query provided')
    story.append(Paragraph(query_text, styles['body']))
    story.append(Spacer(1, 12))


def _add_pdf_analysis(story, styles, payload: Dict[str, Any]):
    """Add analysis section"""
    
    story.append(Paragraph("LEGAL ANALYSIS", styles['heading']))
    
    answer = payload.get('answer', 'No analysis provided')
    
    # Split into paragraphs and add each
    for paragraph in answer.split('\n\n'):
        if paragraph.strip():
            story.append(Paragraph(paragraph.strip(), styles['body']))
            story.append(Spacer(1, 6))
    
    # Add agent analysis if available
    agent_results = payload.get('agent_results', {})
    if agent_results:
        story.append(Spacer(1, 12))
        story.append(Paragraph("EXPERT AGENT ANALYSIS", styles['subheading']))
        
        for agent_name, result in agent_results.items():
            story.append(Paragraph(f"{agent_name.title()} Agent", styles['subheading']))
            
            reasoning = result.get('reasoning', 'No reasoning provided')
            story.append(Paragraph(reasoning, styles['body']))
            
            confidence = result.get('confidence', 0)
            story.append(Paragraph(f"<i>Confidence: {confidence:.1%}</i>", styles['body']))
            story.append(Spacer(1, 8))


def _add_pdf_verification(story, styles, payload: Dict[str, Any]):
    """Add verification section"""
    
    verification = payload.get('verification', {})
    if not verification:
        return
    
    story.append(Paragraph("VERIFICATION REPORT", styles['heading']))
    
    # Overall status
    status = verification.get('verification_level', 'Unknown')
    confidence = verification.get('confidence', 0)
    
    story.append(Paragraph(
        f"<b>Overall Status:</b> {status.title()} ({confidence:.1%} confidence)",
        styles['body']
    ))
    
    # Individual check results
    individual_results = verification.get('individual_results', {})
    if individual_results:
        story.append(Paragraph("Individual Verification Checks", styles['subheading']))
        
        check_data = [['Check Type', 'Status', 'Confidence']]
        for check_name, result in individual_results.items():
            check_data.append([
                check_name.title(),
                'Pass' if result.get('valid') else 'Fail',
                f"{result.get('confidence', 0):.1%}"
            ])
        
        check_table = Table(check_data, colWidths=[2*inch, 1*inch, 1*inch])
        check_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Times-Bold'),
            ('FONTNAME', (0, 1), (-1, -1), 'Times-Roman'),
            ('FONTSIZE', (0, 0), (-1, -1), 9),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ]))
        
        story.append(check_table)
    
    # Flags and warnings
    flags = verification.get('flags', [])
    if flags:
        story.append(Spacer(1, 12))
        story.append(Paragraph("Verification Issues", styles['subheading']))
        for flag in flags[:5]:
            story.append(Paragraph(f"â€¢ {flag.replace('_', ' ').title()}", styles['body']))
    
    story.append(Spacer(1, 12))


def _add_pdf_citations(story, styles, payload: Dict[str, Any]):
    """Add citations section"""
    
    citations = payload.get('citations', [])
    if not citations:
        return
    
    story.append(Paragraph("AUTHORITIES CITED", styles['heading']))
    
    # Group citations by court
    citations_by_court = {}
    for citation in citations:
        court = citation.get('court', 'Other')
        if court not in citations_by_court:
            citations_by_court[court] = []
        citations_by_court[court].append(citation)
    
    # Supreme Court first, then High Courts, then others
    court_order = ['SC'] + sorted([c for c in citations_by_court.keys() if c.startswith('HC-')]) + \
                  sorted([c for c in citations_by_court.keys() if c not in ['SC'] and not c.startswith('HC-')])
    
    for court in court_order:
        if court in citations_by_court:
            court_name = _format_court_name(court)
            story.append(Paragraph(court_name, styles['subheading']))
            
            for i, citation in enumerate(citations_by_court[court], 1):
                # Format citation
                citation_text = f"{i}. "
                
                title = citation.get('title', 'Unknown Case')
                neutral_cite = citation.get('neutral_cite', '')
                reporter_cite = citation.get('reporter_cite', '')
                
                citation_text += title
                if neutral_cite:
                    citation_text += f" {neutral_cite}"
                if reporter_cite:
                    citation_text += f"; {reporter_cite}"
                
                story.append(Paragraph(citation_text, styles['citation']))
    
    story.append(Spacer(1, 12))


def _add_pdf_appendix(story, styles, payload: Dict[str, Any]):
    """Add appendix with source materials"""
    
    sources = payload.get('retrieval_set', [])
    if not sources:
        return
    
    story.append(PageBreak())
    story.append(Paragraph("APPENDIX - SOURCE MATERIALS", styles['heading']))
    
    for i, source in enumerate(sources[:5], 1):  # Limit to top 5
        story.append(Paragraph(f"Source {i}", styles['subheading']))
        
        # Source details
        title = source.get('title', 'Unknown Authority')
        court = source.get('court', 'Unknown Court')
        
        story.append(Paragraph(f"<b>Authority:</b> {title}", styles['body']))
        story.append(Paragraph(f"<b>Court:</b> {_format_court_name(court)}", styles['body']))
        
        # Relevant text
        text = source.get('text', 'No text available')
        if len(text) > 800:
            text = text[:800] + "..."
        
        story.append(Paragraph("<b>Relevant Text:</b>", styles['body']))
        story.append(Paragraph(f"<i>{text}</i>", styles['citation']))
        story.append(Spacer(1, 12))


def _add_pdf_footer(story, styles, run_id: str):
    """Add footer with disclaimers"""
    
    story.append(Spacer(1, 20))
    story.append(Paragraph("_" * 80, styles['footer']))
    
    disclaimer = ("DISCLAIMER: This report is generated by AI and is intended for informational purposes only. "
                 "It should not be considered as legal advice. Please consult with a qualified attorney "
                 "for specific legal matters.")
    
    story.append(Paragraph(f"<b>DISCLAIMER:</b> {disclaimer}", styles['body']))
    
    footer_text = f"Generated by OPAL Legal AI â€¢ Report ID: {run_id} â€¢ {datetime.now().strftime('%Y-%m-%d %H:%M')}"
    story.append(Paragraph(footer_text, styles['footer']))


def _format_court_name(court_code: str) -> str:
    """Format court code to full court name"""
    
    court_names = {
        'SC': 'Supreme Court of India',
        'HC-DEL': 'Delhi High Court',
        'HC-BOM': 'Bombay High Court',
        'HC-CAL': 'Calcutta High Court',
        'HC-MAD': 'Madras High Court',
        'HC-KAR': 'Karnataka High Court',
        'HC-GUJ': 'Gujarat High Court',
        'HC-RAJ': 'Rajasthan High Court',
        'HC-MP': 'Madhya Pradesh High Court',
        'HC-UP': 'Allahabad High Court',
        'HC-CHD': 'Punjab & Haryana High Court',
        'HC-KER': 'Kerala High Court',
        'HC-AP': 'Andhra Pradesh High Court',
        'HC-TS': 'Telangana High Court'
    }
    
    return court_names.get(court_code, court_code)


